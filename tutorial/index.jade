.chapter(data-title='Twilio Chat Swift')
  .step(data-title='Introduction', data-file='app/src/main/AndroidManifest.xml')
    :markdown
      ## Introduction

      Ready to implement a chat application using Twilio IP Messaging Client?
      Here is how it works at a high level:

      1. [Twilio IP Messaging](//www.twilio.com/ip-messaging) is the core product
      we'll be using to handle all the chat functionality.

      1. We use a server side app to generate [user access
      tokens](//www.twilio.com/docs/api/ip-messaging/guides/identity) which contains
      all your Twilio account information. The IP Messaging Client uses this token
      to connect with the API

      1. [Twilio Common](//media.twiliocdn.com/sdk/rtc/android/common/releases/0.1.10.b62-b0c2c3f/docs)
      is the part of the SDK than handles access tokens and even refreshes them upon token
      expiration.

      ---

      **See Also:**
      * [IP Messaging API](//www.twilio.com/docs/api/ip-messaging)
      * [Channels and Messages](//www.twilio.com/docs/api/ip-messaging/guides/channels)
      * [User Identity & Access Tokens](//www.twilio.com/docs/api/ip-messaging/guides/channels)
      * [Twilio IP Messaging Client Reference](//media.twiliocdn.com/sdk/rtc/android/ip-messaging/releases/0.4.10.b204-57cc05a/docs)
      * [Twilio Common Reference](//media.twiliocdn.com/sdk/rtc/android/common/releases/0.1.10.b62-b0c2c3f/docs)

  .step(data-title='Initializing the Client',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/IPMessagingClientManager.java',
        data-highlight='106-141')
    :markdown
      ## Initializing the IP Messaging Client

      The only thing you need to create a client is an access token. This token
      holds information about your Twilio account and IP Messaging API keys. We have created a web
      version of Twilio chat in different languages. You can use any of these to generate the token:

      * [PHP - Laravel](//github.com/TwilioDevEd/twiliochat-laravel)
      * [C# - .NET MVC](//github.com/TwilioDevEd/twiliochat-csharp)
      * [Java - Servlets](//github.com/TwilioDevEd/twiliochat-servlets)
      * [JS - Node](//github.com/TwilioDevEd/twiliochat-node)

      We use [Volley](//developer.android.com/training/volley/index.html)
      to make a request to our server and get the access token.

      ---

      **See Also:**
      * [Set up a request queue with Volley](//developer.android.com/training/volley/requestqueue.html)

  .step(data-title='Getting the Channel List',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='64-98')
    :markdown
      ## Getting the Channel List

      Our `ChannelManager` class takes care of everything related to channels.
      The first thing we need to do, when the class is initialized, is to store
      a list of channels of type `Channels` that we get by calling the method `getChannels`
      from the IP Messaging Client.

      Once we have a `Channels` object, we can fetch the actual channels using the
      `Channels'` method `loadChannelsWithListener`. Once that operation
      finishes successfully, in order to get an array of channels, call the
      method `getChannels` on the same object.

  .step(data-title='Listen to Client Events',
        data-file='app/src/main/java/com/twilio/twiliochat/activities/MainChatActivity.java',
        data-highlight='452-467')
    :markdown
      ## Listen to Client Events

      The IP Messaging Client will trigger events such as `onChannelAdd` or `onChannelDelete`
      on our application. Given the creation or deletion of a channel we'll reload the
      channel list in the sliding panel. If a channel is deleted and we were currently joined to that
      channel, the application will automatically join the general channel.

      You must set your `IPMessagingClient` to listen to events using a
      [IPMessagingClientListener](https://media.twiliocdn.com/sdk/rtc/android/ip-messaging/releases/0.4.10.b204-57cc05a/docs/com/twilio/ipmessaging/IPMessagingClientListener.html).
      In this particular case, `MainChatActivity` implements IPMessagingClientListener, but it's methods
      are called from the ChannelManager class that also implements IPMessagingClientListener (who actually is the
      client's listener).
      Channel manager is used as an event handler proxy.
      Twilio chat sets the listener when loading the channels.

      ---

      **See Also:**
      * [IPMessagingClientListener available event](//media.twiliocdn.com/sdk/rtc/android/ip-messaging/releases/0.4.10.b204-57cc05a/docs/com/twilio/ipmessaging/IPMessagingClientListener.html)
      * [ChannelManager as an event proxy](//github.com/TwilioDevEd/twiliochat-android/blob/1bcde08d53ad6ddc3a738ed254346e269e655922/app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java#L177-L217)

  .step(data-title='Join the General Channel',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='117-166')
    :markdown
      ## Join the General Channel

      This application will try to join a channel called "General Channel" when it starts.
      If the channel doesn't exist it'll create one with that name. The scope of
      this example application will show you how to work only with public channels
      but the IP Messaging client allows you to create private channels and handle
      invitations.

      Notice we set a unique name for the general channel as we don't want to
      create a new general channel every time we start the application.

  .step(data-title='Listen to Channel Events',
        data-file='app/src/main/java/com/twilio/twiliochat/fragments/MainChatFragment.java',
        data-highlight='166-181')
    :markdown
      ## Listen to Channel Events

      We set a channel's listener to `MainChatFragment` that implements `ChannelListener`,
      and here we implemented the following methods that listen to channel events:

      * `messageAdded`: When someone sends a message to the channel you are connected to.
      * `memberJoined`: When someone joins the channel.
      * `memberLeft`: When someone leaves the channel.

      As you may have noticed, each one of these methods include useful objects
      as parameters. One example is the actual message that was added to the channel.

  .step(data-title='Joining Other Channels',
        data-file='app/src/main/java/com/twilio/twiliochat/fragments/MainChatFragment.java',
        data-highlight='109-146')
    :markdown
      ## Joining Other Channels

      The application uses a [Drawer Layout](//developer.android.com/reference/android/support/v4/widget/DrawerLayout.html)
      to show a list of the channels created for that Twilio account.

      When you tap on the name of a channel, from the sidebar, that channel is set
      on the `MainChatFragment`. The `setCurrentChannel` method takes care of joining
      to the selected channel and loading the messages.

  .step(data-title='Creating a Channel',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='100-115')
    :markdown
      ## Creating a Channel

      We use an input dialog so the user can type the name of the new channel.
      The only restriction here is that the user can't create a channel called
      "General Channel". Other than that, creating a channel is as simple as calling
      `createChannel(Map<String, Object> options, CreateChannelListener listener)`
      where `options` has the following required keys:

      * Constants.CHANNEL_FRIENDLY_NAME
      * Constants.CHANNEL_TYPE

      You can use additional keys to create a channel with more details as we did
      with general channel to set a unique name. There's a list of keys you can use
      [here](//media.twiliocdn.com/sdk/rtc/android/ip-messaging/releases/0.4.10.b204-57cc05a/docs/com/twilio/ipmessaging/Constants.html).

  .step(data-title='Deleting a Channel',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='60-62')
    :markdown
      ## Deleting a Channel

      Deleting a channel is easier than creating one. The application
      lets the user delete the channel they are currently joined to through a menu
      option. In order to delete the channel from Twilio you have to call
      the `destroy` method on the channel you are trying to delete. But you still
      need to provide a `StatusListener` to handle the success or failure of the operation.

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a simple chat application for Android.

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
